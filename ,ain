import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { Search, Calculator, Globe, Cpu, Activity, Settings, Brain, Zap, Shield, Lock, AlertTriangle, CheckCircle, Eye, EyeOff, Terminal, Clock, Database, Wifi, WifiOff, Download, Upload, Server, HardDrive } from 'lucide-react';
import * as math from 'mathjs';

const ParacoreSystem = () => {
  // Core System State
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [aiQuery, setAiQuery] = useState('');
  const [aiResponse, setAiResponse] = useState('');
  const [mathExpression, setMathExpression] = useState('');
  const [mathResult, setMathResult] = useState('');
  const [activeMode, setActiveMode] = useState('search');
  
  // Security & System State
  const [securityLevel, setSecurityLevel] = useState('MAXIMUM');
  const [containmentLayers, setContainmentLayers] = useState(54);
  const [adaptiveProtocols, setAdaptiveProtocols] = useState(15);
  const [systemIntegrity, setSystemIntegrity] = useState(99.6);
  const [encryptionStatus, setEncryptionStatus] = useState('AES-256-GCM');
  const [firewallStatus, setFirewallStatus] = useState('ACTIVE');
  const [intrusionDetection, setIntrusionDetection] = useState('MONITORING');
  const [securityAlerts, setSecurityAlerts] = useState([]);
  const [accessAttempts, setAccessAttempts] = useState(0);
  const [lastSecurityScan, setLastSecurityScan] = useState(new Date().toISOString());
  
  // Advanced System Monitoring
  const [quantumState, setQuantumState] = useState({ 
    entanglement: 0.95, 
    coherence: 0.87, 
    fidelity: 0.92,
    quantumNoise: 0.03,
    decoherenceTime: 125
  });
  const [systemStatus, setSystemStatus] = useState('INITIALIZING');
  const [processingThreads, setProcessingThreads] = useState(0);
  const [webServiceStatus, setWebServiceStatus] = useState('SECURED');
  const [searchIndex, setSearchIndex] = useState(0);
  const [quantumCalculations, setQuantumCalculations] = useState([]);
  const [systemLoad, setSystemLoad] = useState({ cpu: 12, memory: 34, network: 8 });
  const [uptime, setUptime] = useState(0);
  const [networkStatus, setNetworkStatus] = useState('CONNECTED');
  const [dataTransfer, setDataTransfer] = useState({ upload: 0, download: 0 });
  
  // Authentication & Authorization
  const [authenticationRequired, setAuthenticationRequired] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [userCredentials, setUserCredentials] = useState({ username: '', password: '' });
  const [sessionToken, setSessionToken] = useState('');
  const [privilegeLevel, setPrivilegeLevel] = useState('RESTRICTED');
  const [biometricEnabled, setBiometricEnabled] = useState(true);
  
  // Error Handling & Logging
  const [systemLogs, setSystemLogs] = useState([]);
  const [errorLogs, setErrorLogs] = useState([]);
  const [auditTrail, setAuditTrail] = useState([]);
  
  // Refs for security monitoring
  const securityMonitorRef = useRef(null);
  const integrityCheckRef = useRef(null);
  const uptimeRef = useRef(null);

  // Enhanced search database with security metadata
  const searchDatabase = useMemo(() => [
    { 
      title: "Quantum Computing Fundamentals", 
      url: "https://quantum-research.org/fundamentals", 
      description: "Introduction to quantum computing principles and applications", 
      category: "Science",
      securityLevel: "PUBLIC",
      lastVerified: "2024-12-15",
      contentHash: "sha256:abc123def456"
    },
    { 
      title: "Advanced Mathematics Portal", 
      url: "https://mathworld.wolfram.com", 
      description: "Comprehensive mathematical reference and calculation tools", 
      category: "Mathematics",
      securityLevel: "PUBLIC",
      lastVerified: "2024-12-14",
      contentHash: "sha256:def789ghi012"
    },
    { 
      title: "Secure Web Development Standards", 
      url: "https://w3.org/security-standards", 
      description: "Latest secure web service protocols and implementation guidelines", 
      category: "Technology",
      securityLevel: "RESTRICTED",
      lastVerified: "2024-12-16",
      contentHash: "sha256:ghi345jkl678"
    },
    { 
      title: "Quantum Cryptography Research", 
      url: "https://arxiv.org/list/quant-ph/crypto", 
      description: "Latest research papers in quantum cryptography and security", 
      category: "Security",
      securityLevel: "CLASSIFIED",
      lastVerified: "2024-12-15",
      contentHash: "sha256:jkl901mno234"
    },
    { 
      title: "Neural Network Architecture Database", 
      url: "https://ai-research.mit.edu/neural-architectures", 
      description: "Advanced neural network designs and implementation guides", 
      category: "AI Research",
      securityLevel: "RESTRICTED",
      lastVerified: "2024-12-16",
      contentHash: "sha256:mno567pqr890"
    },
    {
      title: "Cybersecurity Threat Intelligence",
      url: "https://cti.paracore.secure/intel",
      description: "Real-time threat intelligence and vulnerability assessments",
      category: "Security",
      securityLevel: "CLASSIFIED",
      lastVerified: "2024-12-17",
      contentHash: "sha256:pqr123stu456"
    },
    {
      title: "Distributed Computing Networks",
      url: "https://distributed.paracore.net/nodes",
      description: "High-performance distributed computing infrastructure management",
      category: "Technology",
      securityLevel: "RESTRICTED",
      lastVerified: "2024-12-16",
      contentHash: "sha256:vwx789yzA012"
    }
  ], []);

  // Security Functions
  const logSecurityEvent = useCallback((event, severity = 'INFO') => {
    const timestamp = new Date().toISOString();
    const logEntry = {
      timestamp,
      event,
      severity,
      sessionId: sessionToken || 'UNAUTHENTICATED',
      sourceIP: '10.0.0.' + Math.floor(Math.random() * 255),
      id: Date.now()
    };
    
    setAuditTrail(prev => [logEntry, ...prev.slice(0, 199)]);
    setSystemLogs(prev => [logEntry, ...prev.slice(0, 99)]);
    
    if (severity === 'CRITICAL' || severity === 'HIGH') {
      setSecurityAlerts(prev => [logEntry, ...prev.slice(0, 19)]);
    }
  }, [sessionToken]);

  const validateInput = useCallback((input, type = 'general') => {
    if (typeof input !== 'string') return false;
    
    const patterns = {
      general: /^[a-zA-Z0-9\s\+\-\*\/\(\)\.\,\=\<\>\!\?]+$/,
      mathematical: /^[a-zA-Z0-9\s\+\-\*\/\(\)\.\,\=\<\>\^\|sqrt\[\]sin\cos\tan\log\ln\pi\e]+$/,
      search: /^[a-zA-Z0-9\s\-\_\.\,\!\?]+$/
    };
    
    const pattern = patterns[type] || patterns.general;
    const isValid = pattern.test(input) && input.length <= 500;
    
    if (!isValid) {
      logSecurityEvent(`Input validation failed for type: ${type}`, 'MEDIUM');
    }
    
    return isValid;
  }, [logSecurityEvent]);

  const sanitizeInput = useCallback((input) => {
    return input
      .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
      .replace(/javascript:/gi, '')
      .replace(/on\w+\s*=/gi, '')
      .trim()
      .slice(0, 500);
  }, []);

  const performIntegrityCheck = useCallback(() => {
    const checks = [
      containmentLayers >= 54,
      adaptiveProtocols >= 15,
      securityLevel === 'MAXIMUM',
      firewallStatus === 'ACTIVE',
      intrusionDetection === 'MONITORING',
      encryptionStatus === 'AES-256-GCM',
      systemIntegrity > 95
    ];
    
    const passed = checks.filter(Boolean).length;
    const newIntegrity = (passed / checks.length) * 100;
    
    setSystemIntegrity(newIntegrity);
    
    if (newIntegrity < 90) {
      logSecurityEvent('CRITICAL: System integrity severely compromised', 'CRITICAL');
      setSystemStatus('CRITICAL');
      setIntrusionDetection('ALERT');
    } else if (newIntegrity < 95) {
      logSecurityEvent('System integrity below acceptable threshold', 'HIGH');
      setSystemStatus('COMPROMISED');
    } else if (newIntegrity < 98) {
      logSecurityEvent('System integrity degraded', 'MEDIUM');
      setSystemStatus('DEGRADED');
    } else {
      setSystemStatus('SECURE');
    }
    
    setLastSecurityScan(new Date().toISOString());
  }, [containmentLayers, adaptiveProtocols, securityLevel, firewallStatus, intrusionDetection, encryptionStatus, systemIntegrity, logSecurityEvent]);

  const authenticate = useCallback(() => {
    const { username, password } = userCredentials;
    
    if (username === 'admin' && password === 'ParaCore2024!') {
      const token = `tk_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      setSessionToken(token);
      setIsAuthenticated(true);
      setPrivilegeLevel('ADMINISTRATOR');
      setAccessAttempts(0);
      logSecurityEvent('Successful administrator authentication', 'INFO');
    } else if (username === 'user' && password === 'SecureAccess123!') {
      const token = `tk_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      setSessionToken(token);
      setIsAuthenticated(true);
      setPrivilegeLevel('USER');
      setAccessAttempts(0);
      logSecurityEvent('Successful user authentication', 'INFO');
    } else if (username === 'security' && password === 'SecOps2024#') {
      const token = `tk_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      setSessionToken(token);
      setIsAuthenticated(true);
      setPrivilegeLevel('SECURITY_ANALYST');
      setAccessAttempts(0);
      logSecurityEvent('Successful security analyst authentication', 'INFO');
    } else {
      setAccessAttempts(prev => prev + 1);
      logSecurityEvent(`Failed authentication attempt for user: ${username}`, 'HIGH');
      
      if (accessAttempts >= 2) {
        logSecurityEvent('Multiple failed authentication attempts - potential brute force', 'CRITICAL');
        setIntrusionDetection('ALERT');
        setFirewallStatus('BLOCKING');
      }
    }
  }, [userCredentials, accessAttempts, logSecurityEvent]);

  const logout = useCallback(() => {
    setIsAuthenticated(false);
    setSessionToken('');
    setPrivilegeLevel('RESTRICTED');
    setUserCredentials({ username: '', password: '' });
    setFirewallStatus('ACTIVE');
    setIntrusionDetection('MONITORING');
    logSecurityEvent('User logged out', 'INFO');
  }, [logSecurityEvent]);

  // Enhanced search with security filtering
  const performSecureSearch = useCallback(() => {
    if (!isAuthenticated) {
      logSecurityEvent('Unauthorized search attempt', 'MEDIUM');
      return;
    }
    
    const sanitizedQuery = sanitizeInput(searchQuery);
    if (!validateInput(sanitizedQuery, 'search')) {
      logSecurityEvent('Invalid search query detected', 'MEDIUM');
      return;
    }
    
    setProcessingThreads(prev => prev + 1);
    logSecurityEvent(`Search query executed: ${sanitizedQuery}`, 'INFO');
    
    // Simulate network activity
    setDataTransfer(prev => ({ ...prev, download: prev.download + Math.random() * 1000 }));
    
    setTimeout(() => {
      const results = searchDatabase.filter(item => {
        if (privilegeLevel === 'RESTRICTED' && item.securityLevel !== 'PUBLIC') {
          return false;
        }
        if (privilegeLevel === 'USER' && item.securityLevel === 'CLASSIFIED') {
          return false;
        }
        
        return (
          item.title.toLowerCase().includes(sanitizedQuery.toLowerCase()) ||
          item.description.toLowerCase().includes(sanitizedQuery.toLowerCase()) ||
          item.category.toLowerCase().includes(sanitizedQuery.toLowerCase())
        );
      });
      
      setSearchResults(results);
      setProcessingThreads(prev => prev - 1);
      setSearchIndex(prev => prev + 1);
    }, 1200);
  }, [isAuthenticated, searchQuery, privilegeLevel, searchDatabase, validateInput, sanitizeInput, logSecurityEvent]);

  // Enhanced quantum mathematical solver with security
  const solveSecureQuantumMath = useCallback(() => {
    if (!isAuthenticated) {
      logSecurityEvent('Unauthorized math calculation attempt', 'MEDIUM');
      return;
    }
    
    const sanitizedExpression = sanitizeInput(mathExpression);
    if (!validateInput(sanitizedExpression, 'mathematical')) {
      logSecurityEvent('Invalid mathematical expression detected', 'MEDIUM');
      return;
    }
    
    try {
      const restrictedFunctions = ['import', 'eval', 'Function', 'setTimeout', 'setInterval'];
      if (restrictedFunctions.some(fn => sanitizedExpression.includes(fn))) {
        throw new Error('Restricted function detected');
      }
      
      setProcessingThreads(prev => prev + 1);
      setDataTransfer(prev => ({ ...prev, upload: prev.upload + Math.random() * 500 }));
      
      const result = math.evaluate(sanitizedExpression);
      
      const quantumProcessing = {
        expression: sanitizedExpression,
        classicalResult: result,
        quantumAmplitude: (Math.random() * 2 - 1) * quantumState.fidelity,
        probabilityDistribution: Array.from({length: 8}, () => Math.random() * quantumState.coherence).map(x => x / 8),
        entanglementCoefficient: quantumState.entanglement,
        coherenceTime: (quantumState.decoherenceTime + Math.random() * 25).toFixed(2) + 'μs',
        quantumNoise: quantumState.quantumNoise,
        timestamp: new Date().toISOString(),
        securityHash: `qm_${Date.now()}_${Math.random().toString(36).substr(2, 8)}`
      };
      
      const formattedResult = `QUANTUM CALCULATION RESULT [SECURE]
═══════════════════════════════════════
Expression: ${sanitizedExpression}
Classical Result: ${result}
Quantum Amplitude: ${quantumProcessing.quantumAmplitude.toFixed(6)}
Entanglement Coefficient: ${quantumProcessing.entanglementCoefficient.toFixed(4)}
Coherence Time: ${quantumProcessing.coherenceTime}
Quantum Noise Level: ${(quantumProcessing.quantumNoise * 100).toFixed(2)}%
Probability Vector: [${quantumProcessing.probabilityDistribution.map(p => p.toFixed(3)).join(', ')}]
Security Hash: ${quantumProcessing.securityHash}
Timestamp: ${quantumProcessing.timestamp}`;
      
      setMathResult(formattedResult);
      setQuantumCalculations(prev => [...prev.slice(-9), quantumProcessing]);
      setProcessingThreads(prev => prev - 1);
      logSecurityEvent(`Quantum calculation completed: ${sanitizedExpression}`, 'INFO');
      
    } catch (error) {
      const errorMsg = `Security Error: ${error.message}`;
      setMathResult(errorMsg);
      setProcessingThreads(prev => prev - 1);
      logSecurityEvent(`Mathematical calculation error: ${error.message}`, 'MEDIUM');
    }
  }, [isAuthenticated, mathExpression, quantumState, validateInput, sanitizeInput, logSecurityEvent]);

  // Enhanced AI processing with security
  const processSecureAIQuery = useCallback(() => {
    if (!isAuthenticated) {
      logSecurityEvent('Unauthorized AI query attempt', 'MEDIUM');
      return;
    }
    
    const sanitizedQuery = sanitizeInput(aiQuery);
    if (!validateInput(sanitizedQuery)) {
      logSecurityEvent('Invalid AI query detected', 'MEDIUM');
      return;
    }
    
    setProcessingThreads(prev => prev + 1);
    setDataTransfer(prev => ({ ...prev, upload: prev.upload + Math.random() * 300 }));
    logSecurityEvent(`AI query processed: ${sanitizedQuery}`, 'INFO');
    
    setTimeout(() => {
      let response = '';
      const queryLower = sanitizedQuery.toLowerCase();
      
      if (queryLower.includes('security') || queryLower.includes('protocol')) {
        response = `[SURF SECURE MODE] Current security status: ${securityLevel} with ${containmentLayers} active containment layers and ${adaptiveProtocols} adaptive protocols. System integrity at ${systemIntegrity.toFixed(1)}%. All communications are encrypted with ${encryptionStatus}. Firewall status: ${firewallStatus}. Your privilege level: ${privilegeLevel}. Network status: ${networkStatus}.`;
      } else if (queryLower.includes('quantum')) {
        response = `[SURF QUANTUM ANALYSIS] Quantum subsystem operating with Entanglement: ${(quantumState.entanglement * 100).toFixed(1)}%, Coherence: ${(quantumState.coherence * 100).toFixed(1)}%, Fidelity: ${(quantumState.fidelity * 100).toFixed(1)}%. Decoherence time: ${quantumState.decoherenceTime}μs, Noise level: ${(quantumState.quantumNoise * 100).toFixed(2)}%. All quantum calculations are cryptographically secured with hash verification.`;
      } else if (queryLower.includes('system') || queryLower.includes('status')) {
        response = `[SURF SYSTEM MONITOR] System status: ${systemStatus}, Active threads: ${processingThreads}, Web service: ${webServiceStatus}, Uptime: ${Math.floor(uptime / 60)}h ${uptime % 60}m. CPU: ${systemLoad.cpu}%, Memory: ${systemLoad.memory}%, Network: ${systemLoad.network}%. Data transfer: ↑${dataTransfer.upload.toFixed(0)}KB ↓${dataTransfer.download.toFixed(0)}KB. Last security scan: ${new Date(lastSecurityScan).toLocaleTimeString()}.`;
      } else if (queryLower.includes('threat') || queryLower.includes('alert')) {
        response = `[SURF THREAT ANALYSIS] Current threat level: ${securityAlerts.length > 5 ? 'HIGH' : securityAlerts.length > 2 ? 'MEDIUM' : 'LOW'}. Active security alerts: ${securityAlerts.length}. Intrusion detection: ${intrusionDetection}. Failed access attempts: ${accessAttempts}. All network traffic is being monitored and analyzed in real-time.`;
      } else {
        response = `[SURF AI ASSISTANT] Processing secured query: "${sanitizedQuery}". I am operating under maximum security protocols with ${containmentLayers} containment layers active. All interactions are logged, monitored, and encrypted. Current system integrity: ${systemIntegrity.toFixed(1)}%. Quantum security enabled. How may I assist you within the established security parameters?`;
      }
      
      setAiResponse(response);
      setProcessingThreads(prev => prev - 1);
    }, 1800);
  }, [isAuthenticated, aiQuery, securityLevel, containmentLayers, adaptiveProtocols, systemIntegrity, encryptionStatus, firewallStatus, privilegeLevel, quantumState, systemStatus, processingThreads, webServiceStatus, uptime, systemLoad, lastSecurityScan, networkStatus, dataTransfer, securityAlerts, intrusionDetection, accessAttempts, validateInput, sanitizeInput, logSecurityEvent]);

  // System initialization and monitoring
  useEffect(() => {
    const initializeSecureSystem = () => {
      setSystemStatus('INITIALIZING SECURITY PROTOCOLS');
      logSecurityEvent('System initialization started', 'INFO');
      
      setTimeout(() => {
        setSystemStatus('SECURITY PROTOCOLS ACTIVE');
        setProcessingThreads(4);
        setContainmentLayers(54);
        setAdaptiveProtocols(15);
        performIntegrityCheck();
        logSecurityEvent('Secure system initialization completed', 'INFO');
      }, 3000);
    };
    
    initializeSecureSystem();
    
    securityMonitorRef.current = setInterval(() => {
      setQuantumState(prev => ({
        ...prev,
        entanglement: Math.max(0.85, Math.min(0.99, prev.entanglement + (Math.random() - 0.5) * 0.015)),
        coherence: Math.max(0.80, Math.min(0.95, prev.coherence + (Math.random() - 0.5) * 0.02)),
        fidelity: Math.max(0.88, Math.min(0.98, prev.fidelity + (Math.random() - 0.5) * 0.008)),
        quantumNoise: Math.max(0.01, Math.min(0.05, prev.quantumNoise + (Math.random() - 0.5) * 0.002)),
        decoherenceTime: Math.max(100, Math.min(150, prev.decoherenceTime + (Math.random() - 0.5) * 5))
      }));
      
      setSystemLoad(prev => ({
        cpu: Math.max(5, Math.min(95, prev.cpu + (Math.random() - 0.5) * 10)),
        memory: Math.max(10, Math.min(90, prev.memory + (Math.random() - 0.5) * 8)),
        network: Math.max(2, Math.min(50, prev.network + (Math.random() - 0.5) * 6))
      }));
      
      setDataTransfer(prev => ({
        upload: prev.upload + Math.random() * 50,
        download: prev.download + Math.random() * 100
      }));
      
      // Random network status changes
      if (Math.random() < 0.05) {
        setNetworkStatus(prev => prev === 'CONNECTED' ? 'SECURE_TUNNEL' : 'CONNECTED');
      }
    }, 4000);
    
    integrityCheckRef.current = setInterval(() => {
      performIntegrityCheck();
    }, 30000);
    
    uptimeRef.current = setInterval(() => {
      setUptime(prev => prev + 1);
    }, 60000);

    return () => {
      if (securityMonitorRef.current) clearInterval(securityMonitorRef.current);
      if (integrityCheckRef.current) clearInterval(integrityCheckRef.current);
      if (uptimeRef.current) clearInterval(uptimeRef.current);
    };
  }, [performIntegrityCheck, logSecurityEvent]);

  // Authentication Guard
  if (authenticationRequired && !isAuthenticated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-900 via-black to-red-900 text-white flex items-center justify-center">
        <div className="bg-black/60 backdrop-blur-sm rounded-xl p-8 border border-red-500/50 w-full max-w-md">
          <div className="text-center mb-6">
            <div className="w-16 h-16 bg-gradient-to-r from-red-500 to-orange-500 rounded-full flex items-center justify-center mx-auto mb-4">
              <Lock className="w-8 h-8" />
            </div>
            <h1 className="text-2xl font-bold text-red-400 mb-2">PARACORE SECURE ACCESS</h1>
            <p className="text-red-300 text-sm">Maximum Security Protocols Active</p>
            <div className="text-xs text-gray-400 mt-2">
              Containment Layers: {containmentLayers} | Encryption: {encryptionStatus}
            </div>
          </div>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-red-300 mb-2">Username</label>
              <input
                type="text"
                value={userCredentials.username}
                onChange={(e) => setUserCredentials(prev => ({ ...prev, username: e.target.value }))}
                className="w-full px-4 py-3 bg-black/50 border border-red-500/50 rounded-lg text-white focus:outline-none focus:border-red-500"
                placeholder="Enter username"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-red-300 mb-2">Password</label>
              <input
                type="password"
                value={userCredentials.password}
                onChange={(e) => setUserCredentials(prev => ({ ...prev, password: e.target.value }))}
                onKeyPress={(e) => e.key === 'Enter' && authenticate()}
                className="w-full px-4 py-3 bg-black/50 border border-red-500/50 rounded-lg text-white focus:outline-none focus:border-red-500"
                placeholder="Enter password"
              />
            </div>
            <button
              onClick={authenticate}
              className="w-full py-3 bg-gradient-to-r from-red-600 to-orange-600 rounded-lg font-medium hover:from-red-700 hover:to-orange-700 transition-all"
            >
              AUTHENTICATE
            </button>
          </div>
          
          {accessAttempts > 0 && (
            <div className="mt-4 p-3 bg-red-900/30 border border-red-500/50 rounded-lg">
              <div className="flex items-center space-x-2">
                <AlertTriangle className="w-4 h-4 text-red-400" />
                <span className="text-red-300 text-sm">
                  Failed attempts: {accessAttempts}/3
                </span>
              </div>
              {accessAttempts >= 2 && (
                <div className="text-xs text-red-400 mt-1">
                  Security protocols activated - system under enhanced monitoring
                </div>
              )}
            </div>
          )}
          
          <div className="mt-6 text-xs text-gray-500 text-center">
            <p>Demo Credentials:</p>
            <p>admin / ParaCore2024! (Administrator)</p>
            <p>user / SecureAccess123! (Standard User)</p>
            <p>security / SecOps2024# (Security Analyst)</p>
          </div>
        </div>
      </div>

      {/* Security Status Bar */}
      <div className="bg-gradient-to-r from-green-900/30 to-blue-900/30 border-b border-green-500/20">
        <div className="container mx-auto px-6 py-2">
          <div className="flex items-center justify-between text-xs">
            <div className="flex items-center space-x-6">
              <div className="flex items-center space-x-1">
                <CheckCircle className="w-3 h-3 text-green-400" />
                <span className="text-green-300">Encryption: {encryptionStatus}</span>
              </div>
              <div className="flex items-center space-x-1">
                <Shield className="w-3 h-3 text-blue-400" />
                <span className="text-blue-300">Firewall: {firewallStatus}</span>
              </div>
              <div className="flex items-center space-x-1">
                <Eye className="w-3 h-3 text-purple-400" />
                <span className="text-purple-300">IDS: {intrusionDetection}</span>
              </div>
              <div className="flex items-center space-x-1">
                {networkStatus === 'CONNECTED' ? <Wifi className="w-3 h-3 text-green-400" /> : <WifiOff className="w-3 h-3 text-red-400" />}
                <span className={networkStatus === 'CONNECTED' ? 'text-green-300' : 'text-red-300'}>
                  Network: {networkStatus}
                </span>
              </div>
            </div>
            <div className="text-gray-400 flex items-center space-x-4">
              <span>Uptime: {Math.floor(uptime / 60)}h {uptime % 60}m</span>
              <span>Alerts: {securityAlerts.length}</span>
              <div className="flex items-center space-x-1">
                <Upload className="w-3 h-3" />
                <span>{dataTransfer.upload.toFixed(0)}KB</span>
                <Download className="w-3 h-3" />
                <span>{dataTransfer.download.toFixed(0)}KB</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Enhanced Navigation */}
      <div className="container mx-auto px-6 py-4">
        <div className="flex space-x-2">
          {[
            { id: 'search', label: 'Secure Search', icon: Search },
            { id: 'math', label: 'Quantum Math', icon: Calculator },
            { id: 'ai', label: 'Surf AI', icon: Brain },
            { id: 'security', label: 'Security Center', icon: Shield },
            { id: 'system', label: 'System Monitor', icon: Activity }
          ].map(({ id, label, icon: Icon }) => (
            <button
              key={id}
              onClick={() => setActiveMode(id)}
              className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-all ${
                activeMode === id 
                  ? 'bg-purple-600 text-white shadow-lg' 
                  : 'bg-white/10 text-gray-300 hover:bg-white/20'
              }`}
            >
              <Icon className="w-4 h-4" />
              <span className="text-sm font-medium">{label}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Main Content */}
      <div className="container mx-auto px-6 pb-8">
        {activeMode === 'search' && (
          <div className="space-y-6">
            <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
              <h2 className="text-xl font-bold mb-4 flex items-center">
                <Search className="w-5 h-5 mr-2" />
                PARACORE Secure Search Engine
                <div className="ml-auto flex items-center space-x-2">
                  <Lock className="w-4 h-4 text-green-400" />
                  <span className="text-xs text-green-300">ENCRYPTED</span>
                </div>
              </h2>
              <div className="flex space-x-3">
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && performSecureSearch()}
                  placeholder="Enter secure search query..."
                  className="flex-1 px-4 py-3 bg-black/30 border border-purple-500/30 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-purple-500"
                />
                <button
                  onClick={performSecureSearch}
                  disabled={processingThreads > 0}
                  className="px-6 py-3 bg-gradient-to-r from-purple-600 to-blue-600 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 transition-all disabled:opacity-50"
                >
                  {processingThreads > 0 ? 'Processing...' : 'Secure Search'}
                </button>
              </div>
              <div className="mt-2 text-xs text-gray-400 flex justify-between">
                <span>Access Level: {privilegeLevel} | Results filtered by security clearance</span>
                <span>Search Index: {searchIndex}</span>
              </div>
            </div>

            {searchResults.length > 0 && (
              <div className="space-y-4">
                <div className="text-sm text-gray-400">
                  Found {searchResults.length} results | Security filtered for {privilegeLevel} access
                </div>
                {searchResults.map((result, index) => (
                  <div key={index} className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10 hover:border-purple-500/30 transition-all">
                    <div className="flex items-start justify-between mb-2">
                      <h3 className="text-lg font-semibold text-purple-300">{result.title}</h3>
                      <div className="flex items-center space-x-2">
                        <span className={`px-2 py-1 rounded text-xs font-medium ${
                          result.securityLevel === 'PUBLIC' ? 'bg-green-900/30 text-green-300' :
                          result.securityLevel === 'RESTRICTED' ? 'bg-yellow-900/30 text-yellow-300' :
                          'bg-red-900/30 text-red-300'
                        }`}>
                          {result.securityLevel}
                        </span>
                        <span className="text-xs text-gray-400">{result.category}</span>
                      </div>
                    </div>
                    <p className="text-gray-300 mb-3">{result.description}</p>
                    <div className="flex items-center justify-between text-xs text-gray-400">
                      <a href={result.url} className="text-blue-400 hover:text-blue-300 transition-colors">
                        {result.url}
                      </a>
                      <div className="flex items-center space-x-4">
                        <span>Verified: {result.lastVerified}</span>
                        <span className="font-mono">{result.contentHash.slice(0, 16)}...</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {activeMode === 'math' && (
          <div className="space-y-6">
            <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
              <h2 className="text-xl font-bold mb-4 flex items-center">
                <Calculator className="w-5 h-5 mr-2" />
                Quantum Mathematical Processor
                <div className="ml-auto flex items-center space-x-2">
                  <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                  <span className="text-xs text-green-300">QUANTUM SECURE</span>
                </div>
              </h2>
              
              {/* Quantum State Display */}
              <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-6 p-4 bg-black/20 rounded-lg">
                <div className="text-center">
                  <div className="text-xs text-gray-400">Entanglement</div>
                  <div className="text-sm font-mono text-purple-300">{(quantumState.entanglement * 100).toFixed(1)}%</div>
                </div>
                <div className="text-center">
                  <div className="text-xs text-gray-400">Coherence</div>
                  <div className="text-sm font-mono text-blue-300">{(quantumState.coherence * 100).toFixed(1)}%</div>
                </div>
                <div className="text-center">
                  <div className="text-xs text-gray-400">Fidelity</div>
                  <div className="text-sm font-mono text-green-300">{(quantumState.fidelity * 100).toFixed(1)}%</div>
                </div>
                <div className="text-center">
                  <div className="text-xs text-gray-400">Noise Level</div>
                  <div className="text-sm font-mono text-yellow-300">{(quantumState.quantumNoise * 100).toFixed(2)}%</div>
                </div>
                <div className="text-center">
                  <div className="text-xs text-gray-400">Decoherence</div>
                  <div className="text-sm font-mono text-orange-300">{quantumState.decoherenceTime.toFixed(0)}μs</div>
                </div>
              </div>
              
              <div className="flex space-x-3">
                <input
                  type="text"
                  value={mathExpression}
                  onChange={(e) => setMathExpression(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && solveSecureQuantumMath()}
                  placeholder="Enter mathematical expression (e.g., sqrt(16) + pi * 2)"
                  className="flex-1 px-4 py-3 bg-black/30 border border-purple-500/30 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-purple-500"
                />
                <button
                  onClick={solveSecureQuantumMath}
                  disabled={processingThreads > 0}
                  className="px-6 py-3 bg-gradient-to-r from-green-600 to-blue-600 rounded-lg font-medium hover:from-green-700 hover:to-blue-700 transition-all disabled:opacity-50"
                >
                  {processingThreads > 0 ? 'Computing...' : 'Quantum Solve'}
                </button>
              </div>
            </div>

            {mathResult && (
              <div className="bg-black/40 backdrop-blur-sm rounded-xl p-6 border border-green-500/30">
                <h3 className="text-lg font-bold mb-4 text-green-400">Quantum Calculation Result</h3>
                <pre className="text-sm text-gray-300 whitespace-pre-wrap font-mono bg-black/30 p-4 rounded-lg overflow-x-auto">
                  {mathResult}
                </pre>
              </div>
            )}

            {/* Recent Calculations */}
            {quantumCalculations.length > 0 && (
              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
                <h3 className="text-lg font-bold mb-4">Recent Quantum Calculations</h3>
                <div className="space-y-3">
                  {quantumCalculations.slice(-5).reverse().map((calc, index) => (
                    <div key={calc.timestamp} className="p-3 bg-black/20 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <span className="font-mono text-sm text-purple-300">{calc.expression}</span>
                        <span className="text-xs text-gray-400">{new Date(calc.timestamp).toLocaleTimeString()}</span>
                      </div>
                      <div className="text-sm text-gray-300">
                        Result: {calc.classicalResult} | Quantum Amplitude: {calc.quantumAmplitude.toFixed(4)}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {activeMode === 'ai' && (
          <div className="space-y-6">
            <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
              <h2 className="text-xl font-bold mb-4 flex items-center">
                <Brain className="w-5 h-5 mr-2" />
                SURF AI Assistant
                <div className="ml-auto flex items-center space-x-2">
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
                  <span className="text-xs text-blue-300">AI SECURE</span>
                </div>
              </h2>
              <div className="flex space-x-3">
                <input
                  type="text"
                  value={aiQuery}
                  onChange={(e) => setAiQuery(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && processSecureAIQuery()}
                  placeholder="Ask about security, quantum systems, or system status..."
                  className="flex-1 px-4 py-3 bg-black/30 border border-purple-500/30 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-purple-500"
                />
                <button
                  onClick={processSecureAIQuery}
                  disabled={processingThreads > 0}
                  className="px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg font-medium hover:from-blue-700 hover:to-purple-700 transition-all disabled:opacity-50"
                >
                  {processingThreads > 0 ? 'Processing...' : 'Query AI'}
                </button>
              </div>
            </div>

            {aiResponse && (
              <div className="bg-black/40 backdrop-blur-sm rounded-xl p-6 border border-blue-500/30">
                <h3 className="text-lg font-bold mb-4 text-blue-400">AI Response</h3>
                <div className="text-gray-300 whitespace-pre-wrap bg-black/30 p-4 rounded-lg">
                  {aiResponse}
                </div>
              </div>
            )}
          </div>
        )}

        {activeMode === 'security' && (
          <div className="space-y-6">
            {/* Security Overview */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
                <h3 className="text-lg font-bold mb-4 text-green-400">System Security</h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-300">Security Level:</span>
                    <span className="text-green-400 font-semibold">{securityLevel}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">Integrity:</span>
                    <span className={`font-semibold ${systemIntegrity > 95 ? 'text-green-400' : systemIntegrity > 90 ? 'text-yellow-400' : 'text-red-400'}`}>
                      {systemIntegrity.toFixed(1)}%
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">Containment Layers:</span>
                    <span className="text-purple-400 font-semibold">{containmentLayers}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">Adaptive Protocols:</span>
                    <span className="text-blue-400 font-semibold">{adaptiveProtocols}</span>
                  </div>
                </div>
              </div>

              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
                <h3 className="text-lg font-bold mb-4 text-yellow-400">Active Monitoring</h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-300">Firewall Status:</span>
                    <span className={firewallStatus === 'ACTIVE' ? 'text-green-400' : 'text-red-400'}>{firewallStatus}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">Intrusion Detection:</span>
                    <span className={intrusionDetection === 'MONITORING' ? 'text-green-400' : 'text-red-400'}>{intrusionDetection}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">Encryption:</span>
                    <span className="text-green-400">{encryptionStatus}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">Failed Attempts:</span>
                    <span className={accessAttempts > 2 ? 'text-red-400' : 'text-green-400'}>{accessAttempts}</span>
                  </div>
                </div>
              </div>

              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
                <h3 className="text-lg font-bold mb-4 text-red-400">Security Alerts</h3>
                <div className="space-y-2 max-h-32 overflow-y-auto">
                  {securityAlerts.length === 0 ? (
                    <div className="text-gray-400 text-sm">No active alerts</div>
                  ) : (
                    securityAlerts.slice(0, 5).map((alert, index) => (
                      <div key={alert.id} className={`p-2 rounded text-xs ${
                        alert.severity === 'CRITICAL' ? 'bg-red-900/30 text-red-300' :
                        alert.severity === 'HIGH' ? 'bg-orange-900/30 text-orange-300' :
                        'bg-yellow-900/30 text-yellow-300'
                      }`}>
                        <div className="font-semibold">{alert.event}</div>
                        <div className="text-xs opacity-75">{new Date(alert.timestamp).toLocaleString()}</div>
                      </div>
                    ))
                  )}
                </div>
              </div>
            </div>

            {/* Audit Trail */}
            <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
              <h3 className="text-lg font-bold mb-4">Security Audit Trail</h3>
              <div className="space-y-2 max-h-96 overflow-y-auto">
                {auditTrail.slice(0, 20).map((log, index) => (
                  <div key={log.id} className="flex items-center justify-between p-3 bg-black/20 rounded-lg text-sm">
                    <div className="flex-1">
                      <div className="text-gray-300">{log.event}</div>
                      <div className="text-xs text-gray-500">
                        {new Date(log.timestamp).toLocaleString()} | Session: {log.sessionId.slice(0, 8)}... | IP: {log.sourceIP}
                      </div>
                    </div>
                    <span className={`px-2 py-1 rounded text-xs ${
                      log.severity === 'CRITICAL' ? 'bg-red-900/50 text-red-300' :
                      log.severity === 'HIGH' ? 'bg-orange-900/50 text-orange-300' :
                      log.severity === 'MEDIUM' ? 'bg-yellow-900/50 text-yellow-300' :
                      'bg-blue-900/50 text-blue-300'
                    }`}>
                      {log.severity}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {activeMode === 'system' && (
          <div className="space-y-6">
            {/* System Status Overview */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-semibold text-gray-300">CPU Usage</h3>
                  <Cpu className="w-5 h-5 text-blue-400" />
                </div>
                <div className="text-2xl font-bold text-blue-400 mb-2">{systemLoad.cpu}%</div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div className="bg-blue-400 h-2 rounded-full transition-all duration-300" style={{width: `${systemLoad.cpu}%`}}></div>
                </div>
              </div>

              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-semibold text-gray-300">Memory</h3>
                  <HardDrive className="w-5 h-5 text-green-400" />
                </div>
                <div className="text-2xl font-bold text-green-400 mb-2">{systemLoad.memory}%</div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div className="bg-green-400 h-2 rounded-full transition-all duration-300" style={{width: `${systemLoad.memory}%`}}></div>
                </div>
              </div>

              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-semibold text-gray-300">Network</h3>
                  <Server className="w-5 h-5 text-purple-400" />
                </div>
                <div className="text-2xl font-bold text-purple-400 mb-2">{systemLoad.network}%</div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div className="bg-purple-400 h-2 rounded-full transition-all duration-300" style={{width: `${systemLoad.network}%`}}></div>
                </div>
              </div>

              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-semibold text-gray-300">Threads</h3>
                  <Activity className="w-5 h-5 text-orange-400" />
                </div>
                <div className="text-2xl font-bold text-orange-400 mb-2">{processingThreads}</div>
                <div className="text-xs text-gray-400">Active Processes</div>
              </div>
            </div>

            {/* System Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
                <h3 className="text-lg font-bold mb-4">System Information</h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-300">System Status:</span>
                    <span className={`font-semibold ${
                      systemStatus === 'SECURE' ? 'text-green-400' : 
                      systemStatus === 'DEGRADED' ? 'text-yellow-400' : 
                      'text-red-400'
                    }`}>{systemStatus}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">Web Service:</span>
                    <span className="text-green-400">{webServiceStatus}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">Network Status:</span>
                    <span className={networkStatus === 'CONNECTED' ? 'text-green-400' : 'text-red-400'}>{networkStatus}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">Uptime:</span>
                    <span className="text-blue-400">{Math.floor(uptime / 60)}h {uptime % 60}m</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">Last Security Scan:</span>
                    <span className="text-purple-400">{new Date(lastSecurityScan).toLocaleTimeString()}</span>
                  </div>
                </div>
              </div>

              <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
                <h3 className="text-lg font-bold mb-4">Data Transfer</h3>
                <div className="space-y-4">
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center space-x-2">
                        <Upload className="w-4 h-4 text-green-400" />
                        <span className="text-gray-300">Upload</span>
                      </div>
                      <span className="text-green-400 font-mono">{dataTransfer.upload.toFixed(0)} KB</span>
                    </div>
                    <div className="w-full bg-gray-700 rounded-full h-2">
                      <div className="bg-green-400 h-2 rounded-full transition-all duration-300" style={{width: `${Math.min(100, dataTransfer.upload / 100)}%`}}></div>
                    </div>
                  </div>
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center space-x-2">
                        <Download className="w-4 h-4 text-blue-400" />
                        <span className="text-gray-300">Download</span>
                      </div>
                      <span className="text-blue-400 font-mono">{dataTransfer.download.toFixed(0)} KB</span>
                    </div>
                    <div className="w-full bg-gray-700 rounded-full h-2">
                      <div className="bg-blue-400 h-2 rounded-full transition-all duration-300" style={{width: `${Math.min(100, dataTransfer.download / 200)}%`}}></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* System Logs */}
            <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
              <h3 className="text-lg font-bold mb-4">System Logs</h3>
              <div className="space-y-2 max-h-96 overflow-y-auto">
                {systemLogs.slice(0, 15).map((log, index) => (
                  <div key={log.id} className="flex items-center justify-between p-2 bg-black/20 rounded text-sm">
                    <div className="flex-1">
                      <span className="text-gray-300">{log.event}</span>
                    </div>
                    <div className="flex items-center space-x-2 text-xs text-gray-500">
                      <span>{new Date(log.timestamp).toLocaleTimeString()}</span>
                      <span className={`px-2 py-1 rounded ${
                        log.severity === 'CRITICAL' ? 'bg-red-900/50 text-red-300' :
                        log.severity === 'HIGH' ? 'bg-orange-900/50 text-orange-300' :
                        log.severity === 'MEDIUM' ? 'bg-yellow-900/50 text-yellow-300' :
                        'bg-blue-900/50 text-blue-300'
                      }`}>
                        {log.severity}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ParacoreSystem;
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white">
      {/* Enhanced Security Header */}
      <div className="border-b border-purple-500/30 bg-black/20 backdrop-blur-sm">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center relative">
                <Zap className="w-6 h-6" />
                <div className={`absolute -top-1 -right-1 w-3 h-3 rounded-full border-2 border-black ${
                  systemStatus === 'SECURE' ? 'bg-green-500' : 
                  systemStatus === 'DEGRADED' ? 'bg-yellow-500' : 
                  systemStatus === 'COMPROMISED' ? 'bg-orange-500' : 'bg-red-500'
                }`}></div>
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">
                  PARACORE SECURE
                </h1>
                <p className="text-xs text-gray-400">Maximum Security Protocols | Integrity: {systemIntegrity.toFixed(1)}%</p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-right">
                <div className={`text-sm font-medium flex items-center ${
                  systemStatus === 'SECURE' ? 'text-green-400' : 
                  systemStatus === 'DEGRADED' ? 'text-yellow-400' : 
                  systemStatus === 'COMPROMISED' ? 'text-orange-400' : 'text-red-400'
                }`}>
                  <Shield className="w-4 h-4 mr-1" />
                  {systemStatus}
                </div>
                <div className="text-xs text-gray-400">
                  {privilegeLevel} | Layers: {containmentLayers} | Protocols: {adaptiveProtocols}
                </div>
              </div>
              <button
                onClick={logout}
                className="px-3 py-1 bg-red-600/20 border border-red-500/50 rounded text-xs text-red-300 hover:bg-red-600/30 transition-all"
              >
                LOGOUT
              </button>
            </div>
          </div>
        </div>
